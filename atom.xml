<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason Wang&#39;s blog</title>
  
  <subtitle>唯有梦想不可辜负</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jasonwang.com.cn/"/>
  <updated>2019-09-08T08:35:39.987Z</updated>
  <id>http://www.jasonwang.com.cn/</id>
  
  <author>
    <name>Jason Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>10大数据算法排序</title>
    <link href="http://www.jasonwang.com.cn/2019/09/06/10%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E6%8E%92%E5%BA%8FJava_C++/"/>
    <id>http://www.jasonwang.com.cn/2019/09/06/10大数据算法排序Java_C++/</id>
    <published>2019-09-06T01:39:40.000Z</published>
    <updated>2019-09-08T08:35:39.987Z</updated>
    
    <content type="html"><![CDATA[<p>10大数据算法排序Java_C++</p><a id="more"></a><p><img src="https://s2.ax1x.com/2019/09/07/n11dUK.jpg" alt></p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><blockquote><p>依次比较n与后面的数字，大的放右面，小的放左边</p></blockquote><p><img src="https://s2.ax1x.com/2019/09/07/n11bbq.gif" alt="冒泡流程"></p><p>Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。  </span></span><br><span class="line"><span class="comment">     * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。  </span></span><br><span class="line"><span class="comment">     * 针对所有的元素重复以上的步骤，除了最后一个。</span></span><br><span class="line"><span class="comment">     * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> numbers 需要排序的整型数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> size = numbers.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size-<span class="number">1</span>; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; size-<span class="number">1</span>-i ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[j] &gt; numbers[j+<span class="number">1</span>])  <span class="comment">//交换两数位置</span></span><br><span class="line">            &#123;</span><br><span class="line">            temp = numbers[j];</span><br><span class="line">            numbers[j] = numbers[j+<span class="number">1</span>];</span><br><span class="line">            numbers[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>C++代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">待补充</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><blockquote><p>选择n个数组成的数组arr里最大的一个数，放在arr[n-1]，<br><br>然后维数n-1<br><br>选择前n-1个数组成的数组，取最大数，放在arr</p></blockquote><p><img src="https://s2.ax1x.com/2019/09/07/n13FVx.gif" alt="选择流程"></p><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序算法</span></span><br><span class="line"><span class="comment">     * 在未排序序列中找到最小元素，存放到排序序列的起始位置  </span></span><br><span class="line"><span class="comment">     * 再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。 </span></span><br><span class="line"><span class="comment">     * 以此类推，直到所有元素均排序完毕。 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> numbers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size = numbers.length; <span class="comment">//数组长度</span></span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span> ; <span class="comment">//中间变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k = i;   <span class="comment">//待确定的位置</span></span><br><span class="line">        <span class="comment">//选择出应该在第i个位置的数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = size -<span class="number">1</span> ; j &gt; i ; j--)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[j] &lt; numbers[k])</span><br><span class="line">        &#123;</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换两个数</span></span><br><span class="line">        temp = numbers[i];</span><br><span class="line">        numbers[i] = numbers[k];</span><br><span class="line">        numbers[k] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>C++代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">待补充</span><br></pre></td></tr></table></figure><h3 id="快速排序及其改进算法C-实现"><a href="#快速排序及其改进算法C-实现" class="headerlink" title="快速排序及其改进算法C++实现"></a>快速排序及其改进算法C++实现</h3><blockquote><p>快速排序可以看成是插入排序的改进，它是一种分治的排序算法</p></blockquote><p><img src="https://s2.ax1x.com/2019/09/07/n1158g.gif" alt="快排流程"></p><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastSort</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">12</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">30</span>,<span class="number">45</span>,<span class="number">23</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = a.length-<span class="number">1</span>;</span><br><span class="line">        sort(a,start,end);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;a.length; i++)&#123;</span><br><span class="line">             System.out.println(a[i]);</span><br><span class="line">         &#125;</span><br><span class="line">        </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">         <span class="keyword">int</span> start = low;</span><br><span class="line">         <span class="keyword">int</span> end = high;</span><br><span class="line">         <span class="keyword">int</span> key = a[low];</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         <span class="keyword">while</span>(end&gt;start)&#123;</span><br><span class="line">             <span class="comment">//从后往前比较</span></span><br><span class="line">             <span class="keyword">while</span>(end&gt;start&amp;&amp;a[end]&gt;=key)  <span class="comment">//如果没有比关键值小的，比较下一个，直到有比关键值小的交换位置，然后又从前往后比较</span></span><br><span class="line">                 end--;</span><br><span class="line">             <span class="keyword">if</span>(a[end]&lt;=key)&#123;</span><br><span class="line">                 <span class="keyword">int</span> temp = a[end];</span><br><span class="line">                 a[end] = a[start];</span><br><span class="line">                 a[start] = temp;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//从前往后比较</span></span><br><span class="line">             <span class="keyword">while</span>(end&gt;start&amp;&amp;a[start]&lt;=key)<span class="comment">//如果没有比关键值大的，比较下一个，直到有比关键值大的交换位置</span></span><br><span class="line">                start++;</span><br><span class="line">             <span class="keyword">if</span>(a[start]&gt;=key)&#123;</span><br><span class="line">                 <span class="keyword">int</span> temp = a[start];</span><br><span class="line">                 a[start] = a[end];</span><br><span class="line">                 a[end] = temp;</span><br><span class="line">             &#125;</span><br><span class="line">         <span class="comment">//此时第一次循环比较结束，关键值的位置已经确定了。左边的值都比关键值小，右边的值都比关键值大，但是两边的顺序还有可能是不一样的，进行下面的递归调用</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//递归</span></span><br><span class="line">         <span class="keyword">if</span>(start&gt;low) sort(a,low,start-<span class="number">1</span>);<span class="comment">//左边序列。第一个索引位置到关键值索引-1</span></span><br><span class="line">         <span class="keyword">if</span>(end&lt;high) sort(a,end+<span class="number">1</span>,high);<span class="comment">//右边序列。从关键值索引+1到最后一个</span></span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++代码：<br><a href="https://blog.csdn.net/liuchen1206/article/details/6954074" target="_blank" rel="noopener">cankao</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[]=&#123;<span class="number">34</span>,<span class="number">65</span>,<span class="number">12</span>,<span class="number">43</span>,<span class="number">67</span>,<span class="number">5</span>,<span class="number">78</span>,<span class="number">10</span>,<span class="number">3</span>,<span class="number">70</span>&#125;,k;</span><br><span class="line"><span class="keyword">int</span> len=<span class="keyword">sizeof</span>(<span class="built_in">array</span>)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"The orginal arrayare:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;len;k++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">array</span>[k]&lt;&lt;<span class="string">","</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">quickSort(<span class="built_in">array</span>,<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"The sorted arrayare:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;len;k++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">array</span>[k]&lt;&lt;<span class="string">","</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low&lt; high)</span><br><span class="line">&#123;      </span><br><span class="line"><span class="keyword">int</span> i = low, j = high, x = s[low];</span><br><span class="line"><span class="keyword">while</span> (i &lt; j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(i &lt; j &amp;&amp; s[j]&gt;= x) <span class="comment">// 从右向左找第一个小于x的数</span></span><br><span class="line">j--; </span><br><span class="line"><span class="keyword">if</span>(i &lt; j)</span><br><span class="line">s[i++] = s[j];</span><br><span class="line"><span class="keyword">while</span>(i &lt; j &amp;&amp; s[i]&lt; x) <span class="comment">// 从左向右找第一个大于等于x的数</span></span><br><span class="line">i++; </span><br><span class="line"><span class="keyword">if</span>(i &lt; j)</span><br><span class="line">s[j--] = s[i];</span><br><span class="line">&#125;</span><br><span class="line">s[i] = x;</span><br><span class="line">quickSort(s, low, i - <span class="number">1</span>); <span class="comment">// 递归调用</span></span><br><span class="line">quickSort(s, i + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><blockquote><p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。<br><br>分治思想：<br><img src="http://p3qhnc0eg.bkt.clouddn.com/blog/img/guibing_1.png" alt><br>合并步骤如下<br><img src="http://p3qhnc0eg.bkt.clouddn.com/blog/img/guibing_2.png" alt></p></blockquote><p>Java代码：<a href="https://www.cnblogs.com/chengxiao/p/6194356.html" target="_blank" rel="noopener">cankao</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sortdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by chengxiao on 2016/12/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> []arr = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> []arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> []temp = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];<span class="comment">//在排序前，先建好一个长度等于原数组长度的临时数组，避免递归中频繁开辟空间</span></span><br><span class="line">        sort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>,temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> []temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">            sort(arr,left,mid,temp);<span class="comment">//左边归并排序，使得左子序列有序</span></span><br><span class="line">            sort(arr,mid+<span class="number">1</span>,right,temp);<span class="comment">//右边归并排序，使得右子序列有序</span></span><br><span class="line">            merge(arr,left,mid,right,temp);<span class="comment">//将两个有序子数组合并操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right,<span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = left;<span class="comment">//左序列指针</span></span><br><span class="line">        <span class="keyword">int</span> j = mid+<span class="number">1</span>;<span class="comment">//右序列指针</span></span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;<span class="comment">//临时数组指针</span></span><br><span class="line">        <span class="keyword">while</span> (i&lt;=mid &amp;&amp; j&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;=arr[j])&#123;</span><br><span class="line">                temp[t++] = arr[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                temp[t++] = arr[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)&#123;<span class="comment">//将左边剩余元素填充进temp中</span></span><br><span class="line">            temp[t++] = arr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=right)&#123;<span class="comment">//将右序列剩余元素填充进temp中</span></span><br><span class="line">            temp[t++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//将temp中的元素全部拷贝到原数组中</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            arr[left++] = temp[t++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++代码：<a href="https://www.cnblogs.com/orion7/p/8242774.html" target="_blank" rel="noopener">cankao</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500000</span>,INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> L[maxn/<span class="number">2</span>+<span class="number">2</span>],R[maxn/<span class="number">2</span>+<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n1=mid-left,n2=right-mid;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n1;i++)</span><br><span class="line">        L[i]=a[left+i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n2;i++)</span><br><span class="line">        R[i]=a[mid+i];</span><br><span class="line">    L[n1]=R[n2]=INF;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=left;k&lt;right;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L[i]&lt;=R[j])</span><br><span class="line">            a[k]=L[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a[k]=R[j++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left+<span class="number">1</span>&lt;right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        mergesort(a,n,left,mid);</span><br><span class="line">        mergesort(a,n,mid,right);</span><br><span class="line">        merge(a,n,left,mid,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[maxn],n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    mergesort(a,n,<span class="number">0</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p> <a href="http://www.cnblogs.com/MOBIN/p/5374217.html" target="_blank" rel="noopener">http://www.cnblogs.com/MOBIN/p/5374217.html</a></p><blockquote><p>堆排序主要在于理解堆的构造过程和在输出最大元素后如何对堆进行重新调整</p></blockquote><p><img src="https://s2.ax1x.com/2019/09/07/n13jeI.gif" alt="堆排流程"></p><p>左右父节点下标:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">左：i*2+1</span><br><span class="line">右：i*2+2</span><br><span class="line">父：(i-1)/2</span><br></pre></td></tr></table></figure><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length -<span class="number">1</span>;</span><br><span class="line"><span class="comment">//堆构造，调整结构，符合大顶堆或者小顶堆</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len/<span class="number">2</span> ; i &gt;=<span class="number">0</span>; i --)&#123; </span><br><span class="line">heapAdjust(arr,i,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (len &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">swap(arr,<span class="number">0</span>,len--); <span class="comment">//将堆顶元素与尾节点交换后，长度减1，尾元素最大</span></span><br><span class="line">heapAdjust(arr,<span class="number">0</span>,len); <span class="comment">//再次对堆进行调整</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapAdjust</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">2</span>*i+<span class="number">1</span>,right = <span class="number">2</span>*i+<span class="number">2</span>,largest = i;</span><br><span class="line"><span class="keyword">if</span>(left &lt;= len &amp;&amp; arr[left] &gt; arr[i])</span><br><span class="line">largest = left;</span><br><span class="line"><span class="keyword">if</span>(right &lt;= len &amp;&amp; arr[right] &gt; arr[largest])</span><br><span class="line">largest = right;</span><br><span class="line"><span class="keyword">if</span>(largest != i) &#123;</span><br><span class="line">swap(arr, i, largest);</span><br><span class="line">heapAdjust(arr,largest,len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[len];</span><br><span class="line">arr[len] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> array[] = &#123;<span class="number">20</span>,<span class="number">50</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">70</span>,<span class="number">10</span>,<span class="number">80</span>,<span class="number">30</span>,<span class="number">60</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">"排序之前："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> element : array)&#123;</span><br><span class="line">System.out.print(element+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">heapSort(array);</span><br><span class="line">System.out.println(<span class="string">"\n排序之后："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> element : array)&#123;</span><br><span class="line">System.out.print(element+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p>需要求数组中的最大数<br>1、桶排序不在是一种基于比较的排序方法，而是需要待排序列满足以下两个条件：</p><blockquote><p>1、待排序列的值处于一个可枚举的范围内<br><br>2、待排序列所在可枚举范围不应太大，不然开销会很大。</p></blockquote><p>原理：</p><blockquote><p>假设待排序的数组a中共有N个整数，并且已知数组a中数据的范围[0, MAX)。在桶排序时，创建容量为MAX的桶数组r，并将桶数组元素都初始化为0；将容量为MAX的桶数组中的每一个单元都看作一个”桶”。<br>在排序时，逐个遍历数组a，将数组a的值，作为”桶数组r”的下标。当a中数据被读取时，就将桶的值加1。例如，读取到数组a[3]=5，则将r[5]的值+1。</p></blockquote><p>桶排序适用场景:<br><br>根据桶排序的特点，桶排序一般适用于一些特定的环境，比如数据范围较为局限或者有一些特定的要求，比如需要通过哈希映射快速获取某些值，需要统计每个数的数量。但是这一切都以确认数据的范围为前提，如果范围跨度过大，则考虑用其他算法。</p><p>Java代码：</p><pre><code class="java"><span class="comment">/// &lt;summary&gt;</span><span class="comment">/// 桶排序</span><span class="comment">///</span><span class="comment">///如果有重复的数字,则需要 List&lt;int&gt;数组,这里举的例子没有重复的数字</span><span class="comment">/// &lt;/summary&gt;</span><span class="comment">/// &lt;param name="unsorted"&gt;待排数组&lt;/param&gt;</span><span class="comment">/// &lt;param name="maxNumber"&gt;待排数组中的最大数,如果可以提供的话&lt;/param&gt;</span><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span><span class="keyword">static</span> <span class="keyword">int</span>[] bucket_sort(<span class="keyword">int</span>[] unsorted, <span class="keyword">int</span> maxNumber = <span class="number">97</span>){ <span class="keyword">int</span>[] sorted = <span class="keyword">new</span> <span class="keyword">int</span>[maxNumber + <span class="number">1</span>]; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; unsorted.Length; i++) {  sorted[unsorted[i]] = unsorted[i]; } <span class="keyword">return</span> sorted;}<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span><span class="function"></span>{ <span class="keyword">int</span>[] x = {<span class="number">49</span>、 <span class="number">38</span> 、 <span class="number">35</span>、 <span class="number">97</span> 、 <span class="number">76</span>、 <span class="number">73</span> 、 <span class="number">27</span>、 <span class="number">49</span> }; <span class="keyword">var</span> sorted = bucket_sort(x, <span class="number">97</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sorted.Length; i++) {  <span class="keyword">if</span> (sorted[i] &gt; <span class="number">0</span>)   Console.WriteLine(sorted[i]); } Console.ReadLine();}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;10大数据算法排序Java_C++&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Java" scheme="http://www.jasonwang.com.cn/tags/Java/"/>
    
      <category term="C++" scheme="http://www.jasonwang.com.cn/tags/C/"/>
    
      <category term="算法" scheme="http://www.jasonwang.com.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++入门</title>
    <link href="http://www.jasonwang.com.cn/2019/09/05/C++%E5%85%A5%E9%97%A8/"/>
    <id>http://www.jasonwang.com.cn/2019/09/05/C++入门/</id>
    <published>2019-09-05T10:22:16.000Z</published>
    <updated>2019-09-07T09:47:46.196Z</updated>
    
    <content type="html"><![CDATA[<p>C++入门</p><a id="more"></a><h3 id="指针入门"><a href="#指针入门" class="headerlink" title="指针入门"></a>指针入门</h3><blockquote><p>指针作用：  引用类型，传递地址，减少内存消耗<br>案例<br>int p &gt;定义变量p<br>int* p &gt;定义指针变量p<br>使用指针，先要定义指针变量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int *p;     //int* p &gt;定义指针变量p</span><br><span class="line">    int a=3; </span><br><span class="line">    p=&amp;a;   //&amp;a是把a的地址赋给指针p，&amp;：取址符a</span><br><span class="line">    printf(&quot;%d\n&quot;,*p)   //输出为3</span><br><span class="line">    return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp; 取变量的地址 &amp;(变量名)</span><br><span class="line">* 指针运算符（取值运算） *(变量名)</span><br><span class="line">&amp; *互为逆运算 *(&amp;(int i =6))=6</span><br></pre></td></tr></table></figure><p>指针变量是存储地址的变量，随机分配<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int *p1;</span><br><span class="line">char *name</span><br><span class="line"></span><br><span class="line">int x;int *p; p=&amp;x;</span><br><span class="line">答：*P=3;</span><br><span class="line">p是x的地址，*p是x的值</span><br></pre></td></tr></table></figure><p>常用错误：<br>1、指针不能直接复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">错误：</span><br><span class="line">int *p; </span><br><span class="line">p =100;//错误</span><br><span class="line"></span><br><span class="line">正确：</span><br><span class="line">int i, *p, *t;</span><br><span class="line">p=&amp;i;</span><br><span class="line">t=p;</span><br><span class="line">*p *t是指针，把i的地址赋给pt指针（元素地址）</span><br></pre></td></tr></table></figure><p>2、不能直接给指针赋值(不能直接变量取值)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int x= 20;</span><br><span class="line">printf(&quot;%d,&amp;(*x));</span><br></pre></td></tr></table></figure><p>Scanf函数:函数后的参数应该传入指针，不应该是值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int score;</span><br><span class="line">printf(&quot;shuru :\n&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,score);</span><br></pre></td></tr></table></figure><p>Swap函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">void swap(int *x, int *y)</span><br><span class="line">&#123;</span><br><span class="line">    int temp;//中间变量</span><br><span class="line">    temp=*x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = temp;</span><br><span class="line"></span><br><span class="line">    printf(&quot;x=%d, y=%d \n&quot;, *x, *y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main()&#123;</span><br><span class="line">    int i =13, j =45;</span><br><span class="line">    swap(&amp;i, &amp;j);</span><br><span class="line">    printf(&quot;i=%d, j=%d\n&quot;,i ,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//输出： x=45,y=13    i=45,j=13</span><br></pre></td></tr></table></figure><h3 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h3><blockquote><p>C语言的参数传递都是值传递，当传传递一个指针给函数的时，其实质上还是值传递，除非使用双指针。<br>只有一个<em>号的时候，我们叫它一级指针。*</em> 两个星号的叫二级指针。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void  </span><br><span class="line">swap ( int *a, int *b )&#123;  </span><br><span class="line">    int c;  </span><br><span class="line">    c = *a;  </span><br><span class="line">    *a = *b;  </span><br><span class="line">    *b = c;  </span><br><span class="line">&#125;  </span><br><span class="line">int  </span><br><span class="line">main(int argc, char **argv)&#123;  </span><br><span class="line">    int a,b;  </span><br><span class="line">    a = 16;  </span><br><span class="line">    b = 32;  </span><br><span class="line">    swap( &amp;a, &amp;b);  </span><br><span class="line">    return ( a - b );  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>段代码编译成汇编语言之后，除了会有代码段，数据段，堆栈，那么在调用的时候，会把main函数的参数变量压入main函数的栈帧，然后接着会压入swap函数的局部变量和参数</p><p><img src="http://hi.csdn.net/attachment/201002/9/4758664_12657012034TT4.jpg" alt></p><p>我们申明 **a之后，其实双指针变量a其实已经存在,内存效果如下<br><img src="http://hi.csdn.net/attachment/201002/9/4758664_1265703222WluB.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p中放的是中间桥梁bridge的地址&amp;bridge</span><br><span class="line">*p就是中间桥梁bridge的内容(即是目标操作数的地址&amp;income)，</span><br><span class="line">**p就是目标操作数</span><br><span class="line"></span><br><span class="line">中间的bridge是桥梁，中间件使用的，过度吧</span><br></pre></td></tr></table></figure><blockquote><p>双指针主要用在但我们想向一个A函数传递参数的时候，但是我们希望在A内部对参数做任何修改都能保存起来，那么就是用双指针吧。</p></blockquote><h3 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h3><p>IO库：<br>|头文件|类型|||<br>|-|-|-|-|<br>|iostream|istream,wistream 从流读取数据|ostream, wostream向流写入数据|iostream. wiostream读写流|<br>|fstream|ifstream, wifstream从文件读取数据|ofstream, wofstream向文件写入数据|fstream, wfstream读写文件|<br>|sstream|istringstream. wistringstream string 读取数据|ostringstream, wostringstream string 写入数据|stringstream, wstringstream string 读写string|</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类型ifsream和istringstream都继承自istream;</span><br><span class="line">类型ofsream和ostringstream都继承自ostream;</span><br><span class="line">类型fsream和stringstream都继承自iostream;</span><br></pre></td></tr></table></figure><p>1、创建使用文件流对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ifstream in(ifile);//构造一个ifstream并打开给定文件</span><br><span class="line">ofstream out;//构造输出文件流，未关联任何文件</span><br><span class="line"></span><br><span class="line">in.close();//关闭文件</span><br><span class="line">in.open(ifile + &quot;2&quot;);//打开另一个文件</span><br></pre></td></tr></table></figure><p>ifstream,ofstream和fstream是实现文件读写操作的类型</p><p>案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;                                                                                                                                </span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">   char buffer[256];</span><br><span class="line">   ifstream in(&quot;input.txt&quot;);//文件不存在会返回错误</span><br><span class="line">   if (! in.is_open())&#123;</span><br><span class="line">       cout &lt;&lt; &quot;Error opening file&quot;&lt;&lt;endl;</span><br><span class="line">       exit (1);</span><br><span class="line">   &#125;</span><br><span class="line">   vector&lt;string&gt; a;</span><br><span class="line">   while (!in.eof())&#123;</span><br><span class="line">       in.getline (buffer,100);</span><br><span class="line">       //cout &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">       a.push_back(buffer);</span><br><span class="line">    &#125;   </span><br><span class="line">   for(unsigned int i=0;i&lt;a.size();i++)</span><br><span class="line">       cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="resize-reserve"><a href="#resize-reserve" class="headerlink" title="resize(),reserve()"></a>resize(),reserve()</h3><p>resize()，设置大小（size）;<br>reserve()，设置容量（capacity）;<br>size()是分配容器的内存大小，而capacity()只是设置容器容量大小，但并没有真正分配内存。</p><h3 id="ifstream"><a href="#ifstream" class="headerlink" title="ifstream"></a>ifstream</h3><p><a href="https://blog.csdn.net/kingstar158/article/details/6859379" target="_blank" rel="noopener">cankao</a><br><br>1、文件打开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifstream infile(fname,ios::in);</span><br></pre></td></tr></table></figure><p>定义ifstream的对象infile,打开文件faname,ios::in是读取</p><table><thead><tr><th>打开文件的方式在ios类(所以流式I/O的基类)中定义</th><th></th></tr></thead><tbody><tr><td>IO流的定义</td><td>含义</td></tr><tr><td>ios::in</td><td>为输入(读)而打开文件</td></tr><tr><td>ios::out</td><td>为输出(写)而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>所有输出附加在文件末尾</td></tr><tr><td>ios::trunc</td><td>如果文件已存在则先删除该文件</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p>2、关闭文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">infile.close</span><br></pre></td></tr></table></figure><p>3、文本文件的读写</p><p>类ofstream, ifstream 和fstream 是分别从ostream, istream 和iostream 中引申而来的。这就是为什么 fstream 的对象可以使用其父类的成员来访问数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">写入内容：</span><br><span class="line">#include &lt;fiostream.h&gt;</span><br><span class="line">    int main () &#123;</span><br><span class="line">        ofstream out(&quot;out.txt&quot;);</span><br><span class="line">        if (out.is_open()) </span><br><span class="line">       &#123;</span><br><span class="line">            out &lt;&lt; &quot;This is a line.\n&quot;;</span><br><span class="line">            out &lt;&lt; &quot;This is another line.\n&quot;;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">   //结果: 在out.txt中写入：</span><br><span class="line">   This is a line.</span><br><span class="line">   This is another line</span><br><span class="line"></span><br><span class="line">读取内容：</span><br><span class="line">// reading a text file</span><br><span class="line">    #include &lt;iostream.h&gt;</span><br><span class="line">    #include &lt;fstream.h&gt;</span><br><span class="line">    #include &lt;stdlib.h&gt;</span><br><span class="line">    </span><br><span class="line">    int main () &#123;</span><br><span class="line">        char buffer[256];</span><br><span class="line">        ifstream in(&quot;test.txt&quot;);</span><br><span class="line">        if (! in.is_open())</span><br><span class="line">        &#123; cout &lt;&lt; &quot;Error opening file&quot;; exit (1); &#125;</span><br><span class="line">        while (!in.eof() )</span><br><span class="line">        &#123;</span><br><span class="line">            in.getline (buffer,100);</span><br><span class="line">            cout &lt;&lt; buffer &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    //结果 在屏幕上输出</span><br><span class="line">     This is a line.</span><br><span class="line">     This is another line</span><br><span class="line">```</span><br><span class="line">状态标识符</span><br></pre></td></tr></table></figure><p>bad()<br>如果在读写过程中出错，返回 true 。例如：当我们要对一个不是打开为写状态的文件进行写入时，或者我们要写入的设备没有剩余空间的时候。</p><p>fail()<br>除了与bad() 同样的情况下会返回 true 以外，加上格式错误时也返回true ，例如当想要读入一个整数，而获得了一个字母的时候。</p><p>eof()<br>如果读文件到达文件末尾，返回true。</p><p>good()<br>这是最通用的：如果调用以上任何一个函数返回true 的话，此函数返回 false 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">要想重置以上成员函数所检查的状态标志，你可以使用成员函数clear()，没有参数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### sizeof</span><br><span class="line">sizeof 求对象或者类型的大小`sizeof(array)`&lt;br&gt;</span><br><span class="line">[cankao](https://blog.csdn.net/tao20dage/article/details/52372604)</span><br></pre></td></tr></table></figure><p>特性0：sizeof是运算符，不是函数<br>特性1：sizeof不能求得void类型的长度<br>特性2：sizeof能求得void类型的指针的长度<br>特性3：sizeof能求得静态分配内存的数组的长度!<br>特性4：sizeof不能求得动态分配的内存的大小!<br>特性5：sizeof不能对不完整的数组求长度！<br>特性6：当表达式作为sizeof的操作数时，它返回表达式的计算结果的类型大小，但是它不对表达式求值！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### new(std::nothrow)</span><br><span class="line"> 顾名思义，即不抛出异常，当new一个对象失败时，默认设置该对象为NULL，这样可以方便的通过if(p == NULL) 来判断new操作是否成功</span><br><span class="line"> 建议在c++代码中，凡是涉及到new操作，都采用new(std::nothrow)，然后if(p==NULL)的方式进行判断</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">### vector</span><br><span class="line">[cankao](https://blog.csdn.net/duan19920101/article/details/50617190/)&lt;br&gt;</span><br><span class="line">在c++中，vector是一个十分有用的容器。</span><br><span class="line">作用：它能够像容器一样存放各种类型的对象，简单地说，vector是一个能够存放任意类型的动态数组，能够增加和压缩数据。&lt;br&gt;</span><br><span class="line">&gt;1、如果你要表示的向量长度较长（需要为向量内部保存很多数），容易导致内存泄漏，而且效率会很低；&lt;br&gt;</span><br><span class="line">2、Vector作为函数的参数或者返回值时，需要注意它的写法：</span><br><span class="line">   double Distance(vector&lt;int&gt;&amp;a, vector&lt;int&gt;&amp;b) 其中的“&amp;”绝对不能少！！！</span><br><span class="line"></span><br><span class="line">   c++基本操作</span><br></pre></td></tr></table></figure><p>   1 、基本操作</p><p>(1)头文件#include<vector>.<br>(2)创建vector对象，vector<int> vec;<br>(3)尾部插入数字：vec.push_back(a);<br>(4)使用下标访问元素，cout&lt;&lt;vec[0]&lt;&lt;endl;记住下标是从0开始的。<br>(5)使用迭代器访问元素.<br>vector<int>::iterator it;<br>for(it=vec.begin();it!=vec.end();it++)<br>    cout&lt;&lt;*it&lt;&lt;endl;<br>(6)插入元素：    vec.insert(vec.begin()+i,a);在第i+1个元素前面插入a;<br>(7)删除元素：    vec.erase(vec.begin()+2);删除第3个元素<br>vec.erase(vec.begin()+i,vec.end()+j);删除区间[i,j-1];区间从0开始<br>(8)向量大小:vec.size();<br>(9)清空:vec.clear();<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 二维数组</span><br></pre></td></tr></table></figure></int></int></vector></p><p>#include “stdafx.h”</p><p>#include &lt;cv.h&gt;</p><p>#include <vector> </vector></p><p>#include <iostream><br>using namespace std;<br>int main()<br>{<br>    using namespace std;<br>    int out[3][2] = { 1, 2,<br>             3, 4,<br>            5, 6 };<br>    vector &lt;int*&gt; v1;</iostream></p><pre><code>v1.push_back(out[0]);v1.push_back(out[1]);v1.push_back(out[2]);cout &lt;&lt; v1[0][0] &lt;&lt; endl;//1cout &lt;&lt; v1[0][1] &lt;&lt; endl;//2cout &lt;&lt; v1[1][0] &lt;&lt; endl;//3cout &lt;&lt; v1[1][1] &lt;&lt; endl;//4cout &lt;&lt; v1[2][0] &lt;&lt; endl;//5cout &lt;&lt; v1[2][1] &lt;&lt; endl;//6return 0;</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 随机数</span><br><span class="line">RAND_MAX是C中stdlib.h中宏定义的一个字符常量：</span><br><span class="line">`#define RAND_MAX Ox7FFF`</span><br><span class="line">其值最小为32767,最大为2147483647</span><br></pre></td></tr></table></figure><p>(double)rand() / RAND_MAX;//生成随机数<br>```</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++入门&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C++" scheme="http://www.jasonwang.com.cn/tags/C/"/>
    
  </entry>
  
</feed>
